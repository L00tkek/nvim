snippet sec "section" b
\\section{$1}
$0
endsnippet

snippet subsec "subsection" b
\\subsection{$1}
$0
endsnippet

snippet subsub "subsubsection" b
\\subsubsection{$1}
$0
endsnippet

snippet beg "begin{} / end{}" w
\begin{$1}
$0
\end{$1}
endsnippet

priority 1

snippet beg "begin{} / end{}" bA
\begin{$1}
$0
\end{$1}
endsnippet

snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

snippet mk "Math" wA
$${1}$$0`
#!p
#if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
#    snip.rv = ' '
#else: 
#    snip.rv = ''`
endsnippet

snippet dm "Math" wA
\[$1\]$0
endsnippet

snippet sub "subscript" i
_{$1}$0
endsnippet

snippet sup "superscript" i
^{$1}$0
endsnippet

snippet frac "fraction" w
\\frac{$1}{$2}$0
endsnippet

snippet == "align equals" w
&=
endsnippet

snippet prenotes "default notes preamble" bA
\\documentclass{article}
%\\usepackage{amsmath}
%\\usepackage{amssymb}

%\\usepackage{minted}
%\\usemintedstyle{emacs}

\\setlength{\\parindent}{0pt}
\\setlength{\\parskip}{1em}
\\title{$2}
\\author{Rutvik Deo}
\\date{${3:\\today}}
\begin{document}
\maketitle

$0
\end{document}
endsnippet

snippet premain "default mainfile preamble" bA
\\documentclass[notitlepage, oneside, openany]{report}
\\usepackage{amsmath}
\\usepackage{amssymb}

%\\usepackage{minted}
%\\usemintedstyle{emacs}

\\usepackage{titlesec}
\\titleformat{\chapter}{\normalfont\huge}{\thechapter.}{20pt}{\huge\bf}
\\titlespacing*{\chapter}{0pt}{-19pt}{0pt}

\\usepackage{subfiles}

\\setlength{\parindent}{0pt}
\\setlength{\parskip}{1em}
\\title{$1}
\\author{Rutvik Deo}
\\date{\today}
\\begin{document}
\\maketitle

$0
\\end{document}
endsnippet

snippet presub "default subfile preamble" bA
\\documentclass[${1:../main.tex}]{subfiles}

\begin{document}

$0
\end{document}
endsnippet

snippet sum "sigma notation" w
\\sum_{$1=$2}^{$3}$0
endsnippet

snippet bf "bold text" i
\\textbf{$1}$0
endsnippet

snippet it "italic text" i
\\textit{$1}$0
endsnippet

snippet rm "normal text" i
\\text{$1}$0
endsnippet

snippet lst "code listing" b
\\begin{minted}{$1}
$0
\\end{minted}
endsnippet

snippet mint "one-line minted code" b
\\mint{$1}{$2}
$0
endsnippet

snippet mintin "inline minted code" i
\\mintinline{$1}{$2}$0
endsnippet

snippet arr "right arrow" i
\\rightarrow
endsnippet

snippet eq "equivalence" w
\\equiv
endsnippet

snippet andd "logical and" wA
\\land
endsnippet

snippet orr "logical or" wA
\\lor
endsnippet

snippet forall "forall" iA
\\forall
endsnippet

snippet exx "there exists" iA
\\exists
endsnippet

snippet bar "bar" i
\\overline{$1}$0
endsnippet

snippet hat "hat" i
\\hat{$1}$0
endsnippet

snippet til "tilde" i
\\tilde{$1}$0
endsnippet

snippet cupp "union" wA
\\cup
endsnippet

snippet capp "intersection" wA
\\cap
endsnippet

snippet inn "belongs to" wA
\\in
endsnippet

snippet noinn "doesn't belong to" wA
\\notin
endsnippet

snippet empset "empty set" wA
\\varnothing
endsnippet

snippet subsett "subset" wA
\\subseteq
endsnippet

snippet nsubsett "not a subset" wA
\\nsubseteq
endsnippet

snippet psubsett "proper subset" wA
\\subset
endsnippet

snippet "(np|pn)subsett" "not a proper subset" rwA
\\not\\subset
endsnippet

snippet supsett "superset" wA
\\supseteq
endsnippet

snippet nsupsett "not a superset" wA
\\nsupseteq
endsnippet

snippet psupsett "proper superset" wA
\\supset
endsnippet

snippet "(np|pn)supsett" "not a proper superset" rwA
\\not\\supset
endsnippet

snippet choose "choose" w
\\binom{$1}{$2}$0
endsnippet

snippet int "integral" w
\\int_{${1:-\\infty}}^{${2:\\infty}}$0
endsnippet

snippet {} "brackets" i
\\{$1\\}$0
endsnippet

snippet [] "brackets II" i
\\left[$1\\right]
endsnippet

snippet bb "mathbb" w
\\mathbb{$1}
endsnippet

snippet sqrt "square root" iA
\\sqrt{$1}$0
endsnippet

snippet ceil "ceiling" i
\\left\\lceil $1 \\right\\rceil$0
endsnippet

snippet floor "floor" i
\\left\\lfloor $1 \\right\\rfloor$0
endsnippet

priority 10

snippet vbf "bracket visual text" i
\\textbf\{${VISUAL}\}$0
endsnippet

snippet "([a-zA-Z])bar" "bar" ri
\\overline{`!p snip.rv=match.group(1)`}
endsnippet

snippet "([a-zA-Z])hat" "hat" ri
\\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "([a-zA-Z])til" "tilde" ri
\\tilde{`!p snip.rv=match.group(1)`}
endsnippet

snippet "([a-zA-Z])(\.,|,\.)" "variable" rwA
$`!p snip.rv=match.group(1)`$
endsnippet

snippet "([a-zA-Z]+)//" "backslash" rwA
\\`!p snip.rv=match.group(1)`
endsnippet
